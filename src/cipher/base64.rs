//! Base64 encoding and decoding.
//!
use std::io::{self, Read, Write};

use base64::engine::{self, Engine as _};
use base64::prelude::BASE64_STANDARD_NO_PAD;
use base64::{read::DecoderReader, write::EncoderWriter};

use super::traits::{
    self, Base64Decode, Base64DecodeStream, Base64Encode, Base64EncodeStream, Error,
};

// TODO: Implement dedicated `encode_key()`/`decode_key()` methods.
//  As per the `GeneralPurpose` engine docs:
//      It is not constant-time, though, so it is vulnerable to timing
//      side-channel attacks. For loading cryptographic keys, etc, it is
//      suggested to use the forthcoming constant-time implementation.

impl Base64Encode for &[u8] {
    fn base64_encode(&self) -> String {
        BASE64_STANDARD_NO_PAD.encode(self)
    }
}

impl<const N: usize> Base64Encode for &[u8; N] {
    fn base64_encode(&self) -> String {
        self.as_slice().base64_encode()
    }
}

impl Base64Encode for Vec<u8> {
    fn base64_encode(&self) -> String {
        self.as_slice().base64_encode()
    }
}

impl Base64Decode for &str {
    fn base64_decode(&self) -> traits::Result<Vec<u8>> {
        match BASE64_STANDARD_NO_PAD.decode(self) {
            Ok(bytes) => Ok(bytes),
            Err(reason) => Err(Error::Base64Decode(reason.to_string())),
        }
    }
}

impl Base64Decode for String {
    fn base64_decode(&self) -> traits::Result<Vec<u8>> {
        self.as_str().base64_decode()
    }
}

impl<R: Read> Base64EncodeStream for R {
    fn base64_encode_stream<W: Write>(&mut self, writer: &mut W) -> traits::Result<()> {
        let mut encoder = EncoderWriter::new(writer, &BASE64_STANDARD_NO_PAD);

        std::io::copy(self, &mut encoder)
            .map_err(|reason| Error::Base64StreamEncode(reason.to_string()))?;

        // Flush; Encode all remaining buffered data and write it,
        encoder
            .finish()
            .map_err(|reason| Error::Base64StreamEncode(reason.to_string()))?;

        Ok(())
    }
}

impl<R: Read> Base64DecodeStream for R {
    fn base64_decode_stream<W: Write>(&mut self, writer: &mut W) -> traits::Result<()> {
        let mut decoder = DecoderReader::new(self, &BASE64_STANDARD_NO_PAD);

        std::io::copy(&mut decoder, writer)
            .map_err(|reason| Error::Base64StreamDecode(reason.to_string()))?;

        Ok(())
    }
}

pub struct Base64Sink<'a, W: Write> {
    encoder: EncoderWriter<'a, engine::GeneralPurpose, &'a mut W>,
}

impl<'a, W: Write> Base64Sink<'a, W> {
    pub fn new(writer: &'a mut W) -> Self {
        let encoder = EncoderWriter::new(writer, &BASE64_STANDARD_NO_PAD);
        Self { encoder }
    }
}

impl<W: Write> Write for Base64Sink<'_, W> {
    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
        self.encoder.write(buf)
    }

    fn flush(&mut self) -> io::Result<()> {
        self.encoder.flush()
    }
}

pub struct Base64Source<'a, R: Read> {
    decoder: DecoderReader<'a, engine::GeneralPurpose, &'a mut R>,
}

impl<'a, R: Read> Base64Source<'a, R> {
    pub fn new(reader: &'a mut R) -> Self {
        let decoder = DecoderReader::new(reader, &BASE64_STANDARD_NO_PAD);
        Self { decoder }
    }
}

impl<R: Read> Read for Base64Source<'_, R> {
    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
        self.decoder.read(buf)
    }
}

#[cfg(test)]
pub mod tests {
    use std::io::Cursor;

    use super::*;

    const HELLO_WORLD_1000: &str = "";

    #[test]
    fn base64_encode_bytes() {
        let plaintext = b"hello, world!";

        let base64 = plaintext.base64_encode();

        assert_eq!(base64, "aGVsbG8sIHdvcmxkIQ");
    }

    #[test]
    fn base64_decode_string() {
        let base64 = "aGVsbG8sIHdvcmxkIQ";

        let plaintext = base64.base64_decode().unwrap();
        let plaintext = String::from_utf8_lossy(&plaintext).to_string();

        assert_eq!(plaintext, "hello, world!");
    }

    #[test]
    fn base64_encode_bytes_stream_short() {
        let plaintext = b"hello, world!";

        let mut buf = Vec::new();
        Cursor::new(plaintext)
            .base64_encode_stream(&mut buf)
            .unwrap();

        let base64 = String::from_utf8_lossy(&buf);

        assert_eq!(base64, "aGVsbG8sIHdvcmxkIQ");
    }

    #[test]
    fn base64_encode_bytes_stream_long() {
        let plaintext = b"hello, world!".repeat(1000);

        let mut buf = Vec::new();
        Cursor::new(plaintext)
            .base64_encode_stream(&mut buf)
            .unwrap();

        let base64 = String::from_utf8_lossy(&buf);

        assert_eq!(base64, HELLO_WORLD_1000);
    }

    #[test]
    fn base64_decode_string_stream_short() {
        let base64 = "aGVsbG8sIHdvcmxkIQ";

        let mut buf = Vec::new();
        Cursor::new(base64).base64_decode_stream(&mut buf).unwrap();

        let plaintext = String::from_utf8_lossy(&buf);

        assert_eq!(plaintext, "hello, world!");
    }

    #[test]
    fn base64_decode_string_stream_long() {
        let base64 = HELLO_WORLD_1000;

        let mut buf = Vec::new();
        Cursor::new(base64).base64_decode_stream(&mut buf).unwrap();

        let plaintext = String::from_utf8_lossy(&buf);

        assert_eq!(plaintext, "hello, world!".repeat(1000));
    }
}
